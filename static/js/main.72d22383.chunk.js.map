{"version":3,"sources":["redux/list/listReducer.js","redux/list/listTypes.js","redux/listCard/listCardReducer.js","redux/listCard/listCardTypes.js","redux/rootReducer.js","redux/store.js","components/Header.js","components/board/ListHeader.js","redux/list/listActions.js","components/board/ListFooter.js","redux/listCard/listCardActions.js","components/board/ListCard.js","components/board/List.js","components/board/AddList.js","components/board/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","numOfLists","listReducer","state","action","type","id","uuidv4","title","status","map","item","filter","numOfListCards","listCardReducer","listId","listCard","rootReducer","combineReducers","list","store","createStore","composeWithDevTools","applyMiddleware","logger","Header","className","src","alt","ListHeader","index","useState","listTitle","setListTitle","showTitle","setShowTitle","dispatch","useDispatch","updateListTitle","listTitleValue","updateList","onClick","autoFocus","value","onChange","event","target","handleChange","onKeyPress","key","handleEnter","onBlur","placeholder","ListFooter","useSelector","numOfListCardsCount","addListCard","length","ListCard","listCardTitle","setListCardTitle","showCardTitle","setShowCardTitle","updateListCardTitle","listCardTitleValue","updateListCard","activeItem","active","draggable","onDragStart","dataTransfer","setData","console","log","xOffset","yOffset","initialX","touches","clientX","initialY","clientY","onDrag","preventDefault","currentX","currentY","classList","add","style","transform","drag","onDragEnd","remove","deleteListCard","List","document","addEventListener","elemBelow","elementFromPoint","closest","onDragOver","onDrop","cat","getData","AddList","numOfListsCount","Board","i","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.72d22383.chunk.js","sourcesContent":["import { ADD_LIST, DELETE_LIST, UPDATE_LIST } from './listTypes';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst initialState = {\r\n  numOfLists: [],\r\n};\r\n\r\nconst listReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_LIST:\r\n      return {\r\n        ...state,\r\n        numOfLists: [\r\n          ...state.numOfLists,\r\n          {\r\n            id: uuidv4(),\r\n            title: action.title,\r\n            status: false,\r\n          },\r\n        ],\r\n      };\r\n\r\n    case UPDATE_LIST:\r\n      return {\r\n        ...state,\r\n        numOfLists: state.numOfLists.map((item) =>\r\n          item.id === action.id ? { ...item, title: action.title } : item\r\n        )\r\n      };\r\n\r\n    case DELETE_LIST:\r\n      return {\r\n        ...state,\r\n        numOfLists: state.numOfLists.filter(\r\n          (item) => item.id !== action.id\r\n        ),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default listReducer;\r\n","export const ADD_LIST = 'ADD_LIST';\r\nexport const DELETE_LIST = 'DELETE_LIST';\r\nexport const UPDATE_LIST = 'UPDATE_LIST';\r\n","import { ADD_LIST_CARD, DELETE_LIST_CARD, UPDATE_LIST_CARD } from './listCardTypes';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst initialState = {\r\n  numOfListCards: []\r\n}\r\n\r\nconst listCardReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_LIST_CARD:\r\n      return {\r\n        ...state,\r\n        numOfListCards: [\r\n          ...state.numOfListCards,\r\n          {\r\n            listId: action.id,\r\n            id: uuidv4(),\r\n            title: action.title,\r\n            status: false,\r\n          },\r\n        ],\r\n      };\r\n\r\n    case UPDATE_LIST_CARD:\r\n      return {\r\n        ...state,\r\n        numOfListCards: state.numOfListCards.map((item) =>\r\n          item.id === action.id ? { ...item, title: action.title } : item\r\n        ),\r\n      };\r\n\r\n    case DELETE_LIST_CARD:\r\n      return {\r\n        numOfListCards: state.numOfListCards.filter(\r\n          (listCard) => listCard.id !== action.id\r\n        ),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default listCardReducer\r\n","export const ADD_LIST_CARD = 'ADD_LIST_CARD'\r\nexport const DELETE_LIST_CARD = 'DELETE_LIST_CARD'\r\nexport const UPDATE_LIST_CARD = 'UPDATE_LIST_CARD'","import { combineReducers } from 'redux';\r\nimport listReducer from './list/listReducer'\r\nimport listCardReducer from './listCard/listCardReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  list: listReducer,\r\n  listCard: listCardReducer\r\n});\r\n\r\nexport default rootReducer\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger'\r\nimport rootReducer from './rootReducer'\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(logger))\r\n);\r\n\r\nexport default store;\r\n","import React from 'react'\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className='header'>\r\n      <img className='logo' src='/logo.png' alt='Nollora Board' />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteList, updateList } from '../../redux';\r\n\r\nfunction ListHeader({ id, title, index }) {\r\n  const [listTitle, setListTitle] = useState('');\r\n  const [showTitle, setShowTitle] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const updateListTitle = () => {\r\n    const listTitleValue = listTitle ? listTitle : 'New list';\r\n    setShowTitle(true);\r\n    dispatch(updateList(index, id, listTitleValue));\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    setListTitle(event.target.value);\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    updateListTitle();\r\n  };\r\n\r\n  const handleEnter = (event) => {\r\n    if (event.key === 'Enter') {\r\n      updateListTitle()\r\n    }\r\n  };\r\n\r\n  const editTitle = () => {\r\n    setShowTitle(false);\r\n  };\r\n\r\n  return (\r\n    <div className='list-header'>\r\n      {showTitle ? (\r\n        <h2 onClick={() => editTitle()}>{title}</h2>\r\n      ) : (\r\n        <input\r\n          autoFocus\r\n          type='text'\r\n          value={listTitle}\r\n          onChange={(event) => handleChange(event)}\r\n          onKeyPress={(event) => handleEnter(event)}\r\n          onBlur={() => handleBlur()}\r\n          placeholder='Add list title'\r\n        />\r\n      )}\r\n      <button className='action' onClick={() => dispatch(deleteList(id))}>\r\n        •••\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListHeader\r\n","import { ADD_LIST, DELETE_LIST, UPDATE_LIST } from './listTypes';\r\n\r\nexport const addList = (title) => {\r\n  return {\r\n    type: ADD_LIST,\r\n    title\r\n  }\r\n}\r\n\r\nexport const updateList = (index, id, title) => {\r\n  return {\r\n    type: UPDATE_LIST,\r\n    index,\r\n    id,\r\n    title,\r\n  };\r\n}\r\n\r\nexport const deleteList = (listId) => {\r\n  return {\r\n    type: DELETE_LIST,\r\n    id: listId,\r\n  };\r\n};","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addListCard } from '../../redux';\r\n\r\nfunction ListFooter({ id }) {\r\n  const numOfListCards = useSelector((state) => state.listCard.numOfListCards);\r\n  const dispatch = useDispatch();\r\n  const numOfListCardsCount = numOfListCards.filter(item => item.listId === id)\r\n\r\n  return (\r\n    <div className='list-footer'>\r\n      <button\r\n        className='btn-add-card'\r\n        onClick={() => dispatch(addListCard(id, ''))}\r\n      >\r\n        + Add {numOfListCardsCount.length > 0 ? 'another' : 'a'} card\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListFooter\r\n","import {\r\n  ADD_LIST_CARD,\r\n  DELETE_LIST_CARD,\r\n  UPDATE_LIST_CARD,\r\n} from './listCardTypes';\r\n\r\nexport const addListCard = (id, title) => {\r\n  return {\r\n    type: ADD_LIST_CARD,\r\n    id,\r\n    title\r\n  }\r\n}\r\n\r\nexport const updateListCard = (index, id, title) => {\r\n  return {\r\n    type: UPDATE_LIST_CARD,\r\n    index,\r\n    id,\r\n    title,\r\n  };\r\n};\r\n\r\nexport const deleteListCard = id => {\r\n  return {\r\n    type: DELETE_LIST_CARD,\r\n    id\r\n  };\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteListCard, updateListCard } from '../../redux';\r\n\r\nfunction ListCard({ id, title, index }) {\r\n  const [listCardTitle, setListCardTitle] = useState('');\r\n  const [showCardTitle, setShowCardTitle] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const updateListCardTitle = () => {\r\n    const listCardTitleValue = listCardTitle ? listCardTitle : 'New task';\r\n    setShowCardTitle(true);\r\n    dispatch(updateListCard(index, id, listCardTitleValue));\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setListCardTitle(event.target.value);\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    updateListCardTitle();\r\n  };\r\n\r\n  const handleEnter = (event) => {\r\n    if (event.key === 'Enter') {\r\n      updateListCardTitle();\r\n    }\r\n  };\r\n\r\n  const editTitle = () => {\r\n    setShowCardTitle(false);\r\n  };\r\n\r\n  let activeItem = null;\r\n  let active = false;\r\n\r\n  const onDragStart = (event, id) => {\r\n    event.dataTransfer.setData('id', id);\r\n\r\n    active = true;\r\n    console.log('onDragStart', active);\r\n\r\n    // this is the item we are interacting with\r\n    activeItem = event.target;\r\n\r\n    if (activeItem !== null) {\r\n      if (!activeItem.xOffset) {\r\n        activeItem.xOffset = 0;\r\n      }\r\n\r\n      if (!activeItem.yOffset) {\r\n        activeItem.yOffset = 0;\r\n      }\r\n\r\n      if (event.type === 'touchstart') {\r\n        activeItem.initialX = event.touches[0].clientX - activeItem.xOffset;\r\n        activeItem.initialY = event.touches[0].clientY - activeItem.yOffset;\r\n      } else {\r\n        console.log('doing something!');\r\n        activeItem.initialX = event.clientX - activeItem.xOffset;\r\n        activeItem.initialY = event.clientY - activeItem.yOffset;\r\n      }\r\n    }\r\n  };\r\n\r\n  const dragEnd = event => {\r\n    console.log(\"dragEnd\")\r\n    if (activeItem !== null) {\r\n      activeItem.classList.remove('dragging');\r\n      activeItem.style.transform = 'translate3d(' + activeItem.currentX + 'px, ' + activeItem.currentY + 'px, 0) rotate(0deg)';\r\n    }\r\n\r\n    active = false;\r\n    activeItem = null;\r\n  }\r\n\r\n  const drag = (event) => {\r\n    event.preventDefault();\r\n    if (active) {\r\n      console.log('drag', active);\r\n      if (event.type === 'touchmove') {\r\n        event.preventDefault();\r\n\r\n        activeItem.currentX = event.touches[0].clientX - activeItem.initialX;\r\n        activeItem.currentY = event.touches[0].clientY - activeItem.initialY;\r\n      } else {\r\n        activeItem.currentX = event.clientX - activeItem.initialX;\r\n        activeItem.currentY = event.clientY - activeItem.initialY;\r\n      }\r\n\r\n      activeItem.xOffset = activeItem.currentX;\r\n      activeItem.yOffset = activeItem.currentY;\r\n\r\n      console.log(activeItem.xOffset, activeItem.yOffset);\r\n\r\n      activeItem.classList.add('dragging');\r\n      activeItem.style.transform =\r\n        'translate3d(' +\r\n        activeItem.currentX +\r\n        'px, ' +\r\n        activeItem.currentY +\r\n        'px, 0) rotate(3deg)';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className='list-card'\r\n      draggable\r\n      onDragStart={(event) => onDragStart(event, id)}\r\n      onDrag={(event) => drag(event)}\r\n      onDragEnd={(event) => dragEnd(event)}\r\n    >\r\n      {showCardTitle ? (\r\n        <div className='list-card-task' onClick={() => editTitle()}>\r\n          {title}\r\n        </div>\r\n      ) : (\r\n        <input\r\n          autoFocus\r\n          type='text'\r\n          value={listCardTitle}\r\n          onChange={(event) => handleChange(event)}\r\n          onKeyPress={(event) => handleEnter(event)}\r\n          onBlur={() => handleBlur()}\r\n          placeholder='Add task'\r\n        />\r\n      )}\r\n      <button\r\n        className='btn-delete-card'\r\n        onClick={() => dispatch(deleteListCard(id))}\r\n      >\r\n        &times;\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListCard\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport ListHeader from './ListHeader'\r\nimport ListFooter from './ListFooter'\r\nimport ListCard from './ListCard'\r\n\r\nfunction List({ id, title, index }) {\r\n  const numOfListCards = useSelector((state) => state.listCard.numOfListCards);\r\n  const listId = id;\r\n\r\n  // let currentDroppable = null;\r\n\r\n  const onMouseMove = (event) => {\r\n    let elemBelow = document.elementFromPoint(event.clientX, event.clientY);\r\n    console.log(event.clientX, event.clientY);\r\n\r\n    if (elemBelow.closest('.list')) {\r\n       console.log('yes', index);\r\n    }\r\n\r\n\r\n    // if (!elemBelow) return;\r\n\r\n    // let droppableBelow = elemBelow.closest('.list');\r\n\r\n    // if (currentDroppable !== droppableBelow) {\r\n    //   if (currentDroppable) {\r\n    //     console.log('leaveDroppable');\r\n    //   }\r\n    //   currentDroppable = droppableBelow;\r\n    //   if (currentDroppable) {\r\n    //     console.log('enterDroppable');\r\n    //   }\r\n    // }\r\n\r\n  }\r\n\r\n  document.addEventListener('mousemove', onMouseMove);\r\n\r\n  const onDragOver = (event) => {\r\n    event.preventDefault();\r\n    console.log('onDragOver Init')\r\n  };\r\n\r\n  const onDrop = (event, cat) => {\r\n    let id = event.dataTransfer.getData('id');\r\n\r\n    console.log('onDrop: ',{ id });\r\n\r\n    // let tasks = this.state.tasks.filter((task) => {\r\n    //   if (task.name == id) {\r\n    //     task.category = cat;\r\n    //   }\r\n    //   return task;\r\n    // });\r\n\r\n    // this.setState({\r\n    //   ...this.state,\r\n    //   tasks,\r\n    // });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className='list'\r\n      onDragOver={(event) => onDragOver(event)}\r\n      onDrop={(event) => {\r\n        onDrop(event, id);\r\n      }}\r\n    >\r\n      <ListHeader id={id} title={title} index={index} />\r\n      {numOfListCards.map((listCard) =>\r\n        listCard.listId === listId ? (\r\n          <ListCard key={listCard.id} id={listCard.id} title={listCard.title} />\r\n        ) : (\r\n          ''\r\n        )\r\n      )}\r\n      <ListFooter id={id} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default List\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addList } from '../../redux';\r\n\r\nfunction AddList() {\r\n  const numOfLists = useSelector((state) => state.list.numOfLists);\r\n  const dispatch = useDispatch();\r\n  const numOfListsCount = numOfLists.length;\r\n\r\n  return (\r\n    <button className='btn-add-list' onClick={() => dispatch(addList(''))}>\r\n      + Add {numOfListsCount > 0 ? 'another' : 'new'} list\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default AddList;\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport List from './List';\r\nimport AddList from './AddList';\r\n\r\nfunction Board() {\r\n  const numOfLists = useSelector((state) => state.list.numOfLists);\r\n  return (\r\n    <div className='board'>\r\n      {numOfLists.map((list, i) => (\r\n        <List key={list.id} id={list.id} index={i} title={list.title} />\r\n      ))}\r\n      <AddList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport Header from './components/Header'\nimport Board from './components/board'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Header />\n      <Board />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}